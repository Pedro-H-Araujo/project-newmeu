
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Questions` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Questions
 * 
 */
export type QuestionsModel = runtime.Types.Result.DefaultSelection<Prisma.$QuestionsPayload>

export type AggregateQuestions = {
  _count: QuestionsCountAggregateOutputType | null
  _avg: QuestionsAvgAggregateOutputType | null
  _sum: QuestionsSumAggregateOutputType | null
  _min: QuestionsMinAggregateOutputType | null
  _max: QuestionsMaxAggregateOutputType | null
}

export type QuestionsAvgAggregateOutputType = {
  id: number | null
  userid: number | null
}

export type QuestionsSumAggregateOutputType = {
  id: number | null
  userid: number | null
}

export type QuestionsMinAggregateOutputType = {
  id: number | null
  title: string | null
  body: string | null
  createdAt: Date | null
  updatedAt: Date | null
  userid: number | null
}

export type QuestionsMaxAggregateOutputType = {
  id: number | null
  title: string | null
  body: string | null
  createdAt: Date | null
  updatedAt: Date | null
  userid: number | null
}

export type QuestionsCountAggregateOutputType = {
  id: number
  title: number
  body: number
  createdAt: number
  updatedAt: number
  userid: number
  _all: number
}


export type QuestionsAvgAggregateInputType = {
  id?: true
  userid?: true
}

export type QuestionsSumAggregateInputType = {
  id?: true
  userid?: true
}

export type QuestionsMinAggregateInputType = {
  id?: true
  title?: true
  body?: true
  createdAt?: true
  updatedAt?: true
  userid?: true
}

export type QuestionsMaxAggregateInputType = {
  id?: true
  title?: true
  body?: true
  createdAt?: true
  updatedAt?: true
  userid?: true
}

export type QuestionsCountAggregateInputType = {
  id?: true
  title?: true
  body?: true
  createdAt?: true
  updatedAt?: true
  userid?: true
  _all?: true
}

export type QuestionsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Questions to aggregate.
   */
  where?: Prisma.QuestionsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Questions to fetch.
   */
  orderBy?: Prisma.QuestionsOrderByWithRelationInput | Prisma.QuestionsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.QuestionsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Questions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Questions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Questions
  **/
  _count?: true | QuestionsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: QuestionsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: QuestionsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: QuestionsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: QuestionsMaxAggregateInputType
}

export type GetQuestionsAggregateType<T extends QuestionsAggregateArgs> = {
      [P in keyof T & keyof AggregateQuestions]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateQuestions[P]>
    : Prisma.GetScalarType<T[P], AggregateQuestions[P]>
}




export type QuestionsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.QuestionsWhereInput
  orderBy?: Prisma.QuestionsOrderByWithAggregationInput | Prisma.QuestionsOrderByWithAggregationInput[]
  by: Prisma.QuestionsScalarFieldEnum[] | Prisma.QuestionsScalarFieldEnum
  having?: Prisma.QuestionsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: QuestionsCountAggregateInputType | true
  _avg?: QuestionsAvgAggregateInputType
  _sum?: QuestionsSumAggregateInputType
  _min?: QuestionsMinAggregateInputType
  _max?: QuestionsMaxAggregateInputType
}

export type QuestionsGroupByOutputType = {
  id: number
  title: string
  body: string
  createdAt: Date
  updatedAt: Date
  userid: number
  _count: QuestionsCountAggregateOutputType | null
  _avg: QuestionsAvgAggregateOutputType | null
  _sum: QuestionsSumAggregateOutputType | null
  _min: QuestionsMinAggregateOutputType | null
  _max: QuestionsMaxAggregateOutputType | null
}

type GetQuestionsGroupByPayload<T extends QuestionsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<QuestionsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof QuestionsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], QuestionsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], QuestionsGroupByOutputType[P]>
      }
    >
  >



export type QuestionsWhereInput = {
  AND?: Prisma.QuestionsWhereInput | Prisma.QuestionsWhereInput[]
  OR?: Prisma.QuestionsWhereInput[]
  NOT?: Prisma.QuestionsWhereInput | Prisma.QuestionsWhereInput[]
  id?: Prisma.IntFilter<"Questions"> | number
  title?: Prisma.StringFilter<"Questions"> | string
  body?: Prisma.StringFilter<"Questions"> | string
  createdAt?: Prisma.DateTimeFilter<"Questions"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Questions"> | Date | string
  userid?: Prisma.IntFilter<"Questions"> | number
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  answers?: Prisma.AnswersListRelationFilter
}

export type QuestionsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  body?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userid?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  answers?: Prisma.AnswersOrderByRelationAggregateInput
}

export type QuestionsWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.QuestionsWhereInput | Prisma.QuestionsWhereInput[]
  OR?: Prisma.QuestionsWhereInput[]
  NOT?: Prisma.QuestionsWhereInput | Prisma.QuestionsWhereInput[]
  title?: Prisma.StringFilter<"Questions"> | string
  body?: Prisma.StringFilter<"Questions"> | string
  createdAt?: Prisma.DateTimeFilter<"Questions"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Questions"> | Date | string
  userid?: Prisma.IntFilter<"Questions"> | number
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  answers?: Prisma.AnswersListRelationFilter
}, "id">

export type QuestionsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  body?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userid?: Prisma.SortOrder
  _count?: Prisma.QuestionsCountOrderByAggregateInput
  _avg?: Prisma.QuestionsAvgOrderByAggregateInput
  _max?: Prisma.QuestionsMaxOrderByAggregateInput
  _min?: Prisma.QuestionsMinOrderByAggregateInput
  _sum?: Prisma.QuestionsSumOrderByAggregateInput
}

export type QuestionsScalarWhereWithAggregatesInput = {
  AND?: Prisma.QuestionsScalarWhereWithAggregatesInput | Prisma.QuestionsScalarWhereWithAggregatesInput[]
  OR?: Prisma.QuestionsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.QuestionsScalarWhereWithAggregatesInput | Prisma.QuestionsScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Questions"> | number
  title?: Prisma.StringWithAggregatesFilter<"Questions"> | string
  body?: Prisma.StringWithAggregatesFilter<"Questions"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Questions"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Questions"> | Date | string
  userid?: Prisma.IntWithAggregatesFilter<"Questions"> | number
}

export type QuestionsCreateInput = {
  title: string
  body: string
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutQuestionsInput
  answers?: Prisma.AnswersCreateNestedManyWithoutQuestionInput
}

export type QuestionsUncheckedCreateInput = {
  id?: number
  title: string
  body: string
  createdAt?: Date | string
  updatedAt?: Date | string
  userid: number
  answers?: Prisma.AnswersUncheckedCreateNestedManyWithoutQuestionInput
}

export type QuestionsUpdateInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  body?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutQuestionsNestedInput
  answers?: Prisma.AnswersUpdateManyWithoutQuestionNestedInput
}

export type QuestionsUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  body?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userid?: Prisma.IntFieldUpdateOperationsInput | number
  answers?: Prisma.AnswersUncheckedUpdateManyWithoutQuestionNestedInput
}

export type QuestionsCreateManyInput = {
  id?: number
  title: string
  body: string
  createdAt?: Date | string
  updatedAt?: Date | string
  userid: number
}

export type QuestionsUpdateManyMutationInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  body?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type QuestionsUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  body?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userid?: Prisma.IntFieldUpdateOperationsInput | number
}

export type QuestionsListRelationFilter = {
  every?: Prisma.QuestionsWhereInput
  some?: Prisma.QuestionsWhereInput
  none?: Prisma.QuestionsWhereInput
}

export type QuestionsOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type QuestionsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  body?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userid?: Prisma.SortOrder
}

export type QuestionsAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userid?: Prisma.SortOrder
}

export type QuestionsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  body?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userid?: Prisma.SortOrder
}

export type QuestionsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  body?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userid?: Prisma.SortOrder
}

export type QuestionsSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userid?: Prisma.SortOrder
}

export type QuestionsScalarRelationFilter = {
  is?: Prisma.QuestionsWhereInput
  isNot?: Prisma.QuestionsWhereInput
}

export type QuestionsCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.QuestionsCreateWithoutUserInput, Prisma.QuestionsUncheckedCreateWithoutUserInput> | Prisma.QuestionsCreateWithoutUserInput[] | Prisma.QuestionsUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.QuestionsCreateOrConnectWithoutUserInput | Prisma.QuestionsCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.QuestionsCreateManyUserInputEnvelope
  connect?: Prisma.QuestionsWhereUniqueInput | Prisma.QuestionsWhereUniqueInput[]
}

export type QuestionsUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.QuestionsCreateWithoutUserInput, Prisma.QuestionsUncheckedCreateWithoutUserInput> | Prisma.QuestionsCreateWithoutUserInput[] | Prisma.QuestionsUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.QuestionsCreateOrConnectWithoutUserInput | Prisma.QuestionsCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.QuestionsCreateManyUserInputEnvelope
  connect?: Prisma.QuestionsWhereUniqueInput | Prisma.QuestionsWhereUniqueInput[]
}

export type QuestionsUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.QuestionsCreateWithoutUserInput, Prisma.QuestionsUncheckedCreateWithoutUserInput> | Prisma.QuestionsCreateWithoutUserInput[] | Prisma.QuestionsUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.QuestionsCreateOrConnectWithoutUserInput | Prisma.QuestionsCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.QuestionsUpsertWithWhereUniqueWithoutUserInput | Prisma.QuestionsUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.QuestionsCreateManyUserInputEnvelope
  set?: Prisma.QuestionsWhereUniqueInput | Prisma.QuestionsWhereUniqueInput[]
  disconnect?: Prisma.QuestionsWhereUniqueInput | Prisma.QuestionsWhereUniqueInput[]
  delete?: Prisma.QuestionsWhereUniqueInput | Prisma.QuestionsWhereUniqueInput[]
  connect?: Prisma.QuestionsWhereUniqueInput | Prisma.QuestionsWhereUniqueInput[]
  update?: Prisma.QuestionsUpdateWithWhereUniqueWithoutUserInput | Prisma.QuestionsUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.QuestionsUpdateManyWithWhereWithoutUserInput | Prisma.QuestionsUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.QuestionsScalarWhereInput | Prisma.QuestionsScalarWhereInput[]
}

export type QuestionsUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.QuestionsCreateWithoutUserInput, Prisma.QuestionsUncheckedCreateWithoutUserInput> | Prisma.QuestionsCreateWithoutUserInput[] | Prisma.QuestionsUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.QuestionsCreateOrConnectWithoutUserInput | Prisma.QuestionsCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.QuestionsUpsertWithWhereUniqueWithoutUserInput | Prisma.QuestionsUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.QuestionsCreateManyUserInputEnvelope
  set?: Prisma.QuestionsWhereUniqueInput | Prisma.QuestionsWhereUniqueInput[]
  disconnect?: Prisma.QuestionsWhereUniqueInput | Prisma.QuestionsWhereUniqueInput[]
  delete?: Prisma.QuestionsWhereUniqueInput | Prisma.QuestionsWhereUniqueInput[]
  connect?: Prisma.QuestionsWhereUniqueInput | Prisma.QuestionsWhereUniqueInput[]
  update?: Prisma.QuestionsUpdateWithWhereUniqueWithoutUserInput | Prisma.QuestionsUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.QuestionsUpdateManyWithWhereWithoutUserInput | Prisma.QuestionsUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.QuestionsScalarWhereInput | Prisma.QuestionsScalarWhereInput[]
}

export type QuestionsCreateNestedOneWithoutAnswersInput = {
  create?: Prisma.XOR<Prisma.QuestionsCreateWithoutAnswersInput, Prisma.QuestionsUncheckedCreateWithoutAnswersInput>
  connectOrCreate?: Prisma.QuestionsCreateOrConnectWithoutAnswersInput
  connect?: Prisma.QuestionsWhereUniqueInput
}

export type QuestionsUpdateOneRequiredWithoutAnswersNestedInput = {
  create?: Prisma.XOR<Prisma.QuestionsCreateWithoutAnswersInput, Prisma.QuestionsUncheckedCreateWithoutAnswersInput>
  connectOrCreate?: Prisma.QuestionsCreateOrConnectWithoutAnswersInput
  upsert?: Prisma.QuestionsUpsertWithoutAnswersInput
  connect?: Prisma.QuestionsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.QuestionsUpdateToOneWithWhereWithoutAnswersInput, Prisma.QuestionsUpdateWithoutAnswersInput>, Prisma.QuestionsUncheckedUpdateWithoutAnswersInput>
}

export type QuestionsCreateWithoutUserInput = {
  title: string
  body: string
  createdAt?: Date | string
  updatedAt?: Date | string
  answers?: Prisma.AnswersCreateNestedManyWithoutQuestionInput
}

export type QuestionsUncheckedCreateWithoutUserInput = {
  id?: number
  title: string
  body: string
  createdAt?: Date | string
  updatedAt?: Date | string
  answers?: Prisma.AnswersUncheckedCreateNestedManyWithoutQuestionInput
}

export type QuestionsCreateOrConnectWithoutUserInput = {
  where: Prisma.QuestionsWhereUniqueInput
  create: Prisma.XOR<Prisma.QuestionsCreateWithoutUserInput, Prisma.QuestionsUncheckedCreateWithoutUserInput>
}

export type QuestionsCreateManyUserInputEnvelope = {
  data: Prisma.QuestionsCreateManyUserInput | Prisma.QuestionsCreateManyUserInput[]
}

export type QuestionsUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.QuestionsWhereUniqueInput
  update: Prisma.XOR<Prisma.QuestionsUpdateWithoutUserInput, Prisma.QuestionsUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.QuestionsCreateWithoutUserInput, Prisma.QuestionsUncheckedCreateWithoutUserInput>
}

export type QuestionsUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.QuestionsWhereUniqueInput
  data: Prisma.XOR<Prisma.QuestionsUpdateWithoutUserInput, Prisma.QuestionsUncheckedUpdateWithoutUserInput>
}

export type QuestionsUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.QuestionsScalarWhereInput
  data: Prisma.XOR<Prisma.QuestionsUpdateManyMutationInput, Prisma.QuestionsUncheckedUpdateManyWithoutUserInput>
}

export type QuestionsScalarWhereInput = {
  AND?: Prisma.QuestionsScalarWhereInput | Prisma.QuestionsScalarWhereInput[]
  OR?: Prisma.QuestionsScalarWhereInput[]
  NOT?: Prisma.QuestionsScalarWhereInput | Prisma.QuestionsScalarWhereInput[]
  id?: Prisma.IntFilter<"Questions"> | number
  title?: Prisma.StringFilter<"Questions"> | string
  body?: Prisma.StringFilter<"Questions"> | string
  createdAt?: Prisma.DateTimeFilter<"Questions"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Questions"> | Date | string
  userid?: Prisma.IntFilter<"Questions"> | number
}

export type QuestionsCreateWithoutAnswersInput = {
  title: string
  body: string
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutQuestionsInput
}

export type QuestionsUncheckedCreateWithoutAnswersInput = {
  id?: number
  title: string
  body: string
  createdAt?: Date | string
  updatedAt?: Date | string
  userid: number
}

export type QuestionsCreateOrConnectWithoutAnswersInput = {
  where: Prisma.QuestionsWhereUniqueInput
  create: Prisma.XOR<Prisma.QuestionsCreateWithoutAnswersInput, Prisma.QuestionsUncheckedCreateWithoutAnswersInput>
}

export type QuestionsUpsertWithoutAnswersInput = {
  update: Prisma.XOR<Prisma.QuestionsUpdateWithoutAnswersInput, Prisma.QuestionsUncheckedUpdateWithoutAnswersInput>
  create: Prisma.XOR<Prisma.QuestionsCreateWithoutAnswersInput, Prisma.QuestionsUncheckedCreateWithoutAnswersInput>
  where?: Prisma.QuestionsWhereInput
}

export type QuestionsUpdateToOneWithWhereWithoutAnswersInput = {
  where?: Prisma.QuestionsWhereInput
  data: Prisma.XOR<Prisma.QuestionsUpdateWithoutAnswersInput, Prisma.QuestionsUncheckedUpdateWithoutAnswersInput>
}

export type QuestionsUpdateWithoutAnswersInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  body?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutQuestionsNestedInput
}

export type QuestionsUncheckedUpdateWithoutAnswersInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  body?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userid?: Prisma.IntFieldUpdateOperationsInput | number
}

export type QuestionsCreateManyUserInput = {
  id?: number
  title: string
  body: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type QuestionsUpdateWithoutUserInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  body?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  answers?: Prisma.AnswersUpdateManyWithoutQuestionNestedInput
}

export type QuestionsUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  body?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  answers?: Prisma.AnswersUncheckedUpdateManyWithoutQuestionNestedInput
}

export type QuestionsUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  body?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type QuestionsCountOutputType
 */

export type QuestionsCountOutputType = {
  answers: number
}

export type QuestionsCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  answers?: boolean | QuestionsCountOutputTypeCountAnswersArgs
}

/**
 * QuestionsCountOutputType without action
 */
export type QuestionsCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the QuestionsCountOutputType
   */
  select?: Prisma.QuestionsCountOutputTypeSelect<ExtArgs> | null
}

/**
 * QuestionsCountOutputType without action
 */
export type QuestionsCountOutputTypeCountAnswersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AnswersWhereInput
}


export type QuestionsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  body?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userid?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  answers?: boolean | Prisma.Questions$answersArgs<ExtArgs>
  _count?: boolean | Prisma.QuestionsCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["questions"]>

export type QuestionsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  body?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userid?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["questions"]>

export type QuestionsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  body?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userid?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["questions"]>

export type QuestionsSelectScalar = {
  id?: boolean
  title?: boolean
  body?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userid?: boolean
}

export type QuestionsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "body" | "createdAt" | "updatedAt" | "userid", ExtArgs["result"]["questions"]>
export type QuestionsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  answers?: boolean | Prisma.Questions$answersArgs<ExtArgs>
  _count?: boolean | Prisma.QuestionsCountOutputTypeDefaultArgs<ExtArgs>
}
export type QuestionsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type QuestionsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $QuestionsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Questions"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    answers: Prisma.$AnswersPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    title: string
    body: string
    createdAt: Date
    updatedAt: Date
    userid: number
  }, ExtArgs["result"]["questions"]>
  composites: {}
}

export type QuestionsGetPayload<S extends boolean | null | undefined | QuestionsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$QuestionsPayload, S>

export type QuestionsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<QuestionsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: QuestionsCountAggregateInputType | true
  }

export interface QuestionsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Questions'], meta: { name: 'Questions' } }
  /**
   * Find zero or one Questions that matches the filter.
   * @param {QuestionsFindUniqueArgs} args - Arguments to find a Questions
   * @example
   * // Get one Questions
   * const questions = await prisma.questions.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends QuestionsFindUniqueArgs>(args: Prisma.SelectSubset<T, QuestionsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__QuestionsClient<runtime.Types.Result.GetResult<Prisma.$QuestionsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Questions that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {QuestionsFindUniqueOrThrowArgs} args - Arguments to find a Questions
   * @example
   * // Get one Questions
   * const questions = await prisma.questions.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends QuestionsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, QuestionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__QuestionsClient<runtime.Types.Result.GetResult<Prisma.$QuestionsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Questions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QuestionsFindFirstArgs} args - Arguments to find a Questions
   * @example
   * // Get one Questions
   * const questions = await prisma.questions.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends QuestionsFindFirstArgs>(args?: Prisma.SelectSubset<T, QuestionsFindFirstArgs<ExtArgs>>): Prisma.Prisma__QuestionsClient<runtime.Types.Result.GetResult<Prisma.$QuestionsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Questions that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QuestionsFindFirstOrThrowArgs} args - Arguments to find a Questions
   * @example
   * // Get one Questions
   * const questions = await prisma.questions.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends QuestionsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, QuestionsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__QuestionsClient<runtime.Types.Result.GetResult<Prisma.$QuestionsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Questions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QuestionsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Questions
   * const questions = await prisma.questions.findMany()
   * 
   * // Get first 10 Questions
   * const questions = await prisma.questions.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const questionsWithIdOnly = await prisma.questions.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends QuestionsFindManyArgs>(args?: Prisma.SelectSubset<T, QuestionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$QuestionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Questions.
   * @param {QuestionsCreateArgs} args - Arguments to create a Questions.
   * @example
   * // Create one Questions
   * const Questions = await prisma.questions.create({
   *   data: {
   *     // ... data to create a Questions
   *   }
   * })
   * 
   */
  create<T extends QuestionsCreateArgs>(args: Prisma.SelectSubset<T, QuestionsCreateArgs<ExtArgs>>): Prisma.Prisma__QuestionsClient<runtime.Types.Result.GetResult<Prisma.$QuestionsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Questions.
   * @param {QuestionsCreateManyArgs} args - Arguments to create many Questions.
   * @example
   * // Create many Questions
   * const questions = await prisma.questions.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends QuestionsCreateManyArgs>(args?: Prisma.SelectSubset<T, QuestionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Questions and returns the data saved in the database.
   * @param {QuestionsCreateManyAndReturnArgs} args - Arguments to create many Questions.
   * @example
   * // Create many Questions
   * const questions = await prisma.questions.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Questions and only return the `id`
   * const questionsWithIdOnly = await prisma.questions.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends QuestionsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, QuestionsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$QuestionsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Questions.
   * @param {QuestionsDeleteArgs} args - Arguments to delete one Questions.
   * @example
   * // Delete one Questions
   * const Questions = await prisma.questions.delete({
   *   where: {
   *     // ... filter to delete one Questions
   *   }
   * })
   * 
   */
  delete<T extends QuestionsDeleteArgs>(args: Prisma.SelectSubset<T, QuestionsDeleteArgs<ExtArgs>>): Prisma.Prisma__QuestionsClient<runtime.Types.Result.GetResult<Prisma.$QuestionsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Questions.
   * @param {QuestionsUpdateArgs} args - Arguments to update one Questions.
   * @example
   * // Update one Questions
   * const questions = await prisma.questions.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends QuestionsUpdateArgs>(args: Prisma.SelectSubset<T, QuestionsUpdateArgs<ExtArgs>>): Prisma.Prisma__QuestionsClient<runtime.Types.Result.GetResult<Prisma.$QuestionsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Questions.
   * @param {QuestionsDeleteManyArgs} args - Arguments to filter Questions to delete.
   * @example
   * // Delete a few Questions
   * const { count } = await prisma.questions.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends QuestionsDeleteManyArgs>(args?: Prisma.SelectSubset<T, QuestionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Questions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QuestionsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Questions
   * const questions = await prisma.questions.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends QuestionsUpdateManyArgs>(args: Prisma.SelectSubset<T, QuestionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Questions and returns the data updated in the database.
   * @param {QuestionsUpdateManyAndReturnArgs} args - Arguments to update many Questions.
   * @example
   * // Update many Questions
   * const questions = await prisma.questions.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Questions and only return the `id`
   * const questionsWithIdOnly = await prisma.questions.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends QuestionsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, QuestionsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$QuestionsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Questions.
   * @param {QuestionsUpsertArgs} args - Arguments to update or create a Questions.
   * @example
   * // Update or create a Questions
   * const questions = await prisma.questions.upsert({
   *   create: {
   *     // ... data to create a Questions
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Questions we want to update
   *   }
   * })
   */
  upsert<T extends QuestionsUpsertArgs>(args: Prisma.SelectSubset<T, QuestionsUpsertArgs<ExtArgs>>): Prisma.Prisma__QuestionsClient<runtime.Types.Result.GetResult<Prisma.$QuestionsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Questions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QuestionsCountArgs} args - Arguments to filter Questions to count.
   * @example
   * // Count the number of Questions
   * const count = await prisma.questions.count({
   *   where: {
   *     // ... the filter for the Questions we want to count
   *   }
   * })
  **/
  count<T extends QuestionsCountArgs>(
    args?: Prisma.Subset<T, QuestionsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], QuestionsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Questions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QuestionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends QuestionsAggregateArgs>(args: Prisma.Subset<T, QuestionsAggregateArgs>): Prisma.PrismaPromise<GetQuestionsAggregateType<T>>

  /**
   * Group by Questions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QuestionsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends QuestionsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: QuestionsGroupByArgs['orderBy'] }
      : { orderBy?: QuestionsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, QuestionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Questions model
 */
readonly fields: QuestionsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Questions.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__QuestionsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  answers<T extends Prisma.Questions$answersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Questions$answersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AnswersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Questions model
 */
export interface QuestionsFieldRefs {
  readonly id: Prisma.FieldRef<"Questions", 'Int'>
  readonly title: Prisma.FieldRef<"Questions", 'String'>
  readonly body: Prisma.FieldRef<"Questions", 'String'>
  readonly createdAt: Prisma.FieldRef<"Questions", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Questions", 'DateTime'>
  readonly userid: Prisma.FieldRef<"Questions", 'Int'>
}
    

// Custom InputTypes
/**
 * Questions findUnique
 */
export type QuestionsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Questions
   */
  select?: Prisma.QuestionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Questions
   */
  omit?: Prisma.QuestionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuestionsInclude<ExtArgs> | null
  /**
   * Filter, which Questions to fetch.
   */
  where: Prisma.QuestionsWhereUniqueInput
}

/**
 * Questions findUniqueOrThrow
 */
export type QuestionsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Questions
   */
  select?: Prisma.QuestionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Questions
   */
  omit?: Prisma.QuestionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuestionsInclude<ExtArgs> | null
  /**
   * Filter, which Questions to fetch.
   */
  where: Prisma.QuestionsWhereUniqueInput
}

/**
 * Questions findFirst
 */
export type QuestionsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Questions
   */
  select?: Prisma.QuestionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Questions
   */
  omit?: Prisma.QuestionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuestionsInclude<ExtArgs> | null
  /**
   * Filter, which Questions to fetch.
   */
  where?: Prisma.QuestionsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Questions to fetch.
   */
  orderBy?: Prisma.QuestionsOrderByWithRelationInput | Prisma.QuestionsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Questions.
   */
  cursor?: Prisma.QuestionsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Questions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Questions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Questions.
   */
  distinct?: Prisma.QuestionsScalarFieldEnum | Prisma.QuestionsScalarFieldEnum[]
}

/**
 * Questions findFirstOrThrow
 */
export type QuestionsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Questions
   */
  select?: Prisma.QuestionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Questions
   */
  omit?: Prisma.QuestionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuestionsInclude<ExtArgs> | null
  /**
   * Filter, which Questions to fetch.
   */
  where?: Prisma.QuestionsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Questions to fetch.
   */
  orderBy?: Prisma.QuestionsOrderByWithRelationInput | Prisma.QuestionsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Questions.
   */
  cursor?: Prisma.QuestionsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Questions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Questions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Questions.
   */
  distinct?: Prisma.QuestionsScalarFieldEnum | Prisma.QuestionsScalarFieldEnum[]
}

/**
 * Questions findMany
 */
export type QuestionsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Questions
   */
  select?: Prisma.QuestionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Questions
   */
  omit?: Prisma.QuestionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuestionsInclude<ExtArgs> | null
  /**
   * Filter, which Questions to fetch.
   */
  where?: Prisma.QuestionsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Questions to fetch.
   */
  orderBy?: Prisma.QuestionsOrderByWithRelationInput | Prisma.QuestionsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Questions.
   */
  cursor?: Prisma.QuestionsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Questions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Questions.
   */
  skip?: number
  distinct?: Prisma.QuestionsScalarFieldEnum | Prisma.QuestionsScalarFieldEnum[]
}

/**
 * Questions create
 */
export type QuestionsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Questions
   */
  select?: Prisma.QuestionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Questions
   */
  omit?: Prisma.QuestionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuestionsInclude<ExtArgs> | null
  /**
   * The data needed to create a Questions.
   */
  data: Prisma.XOR<Prisma.QuestionsCreateInput, Prisma.QuestionsUncheckedCreateInput>
}

/**
 * Questions createMany
 */
export type QuestionsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Questions.
   */
  data: Prisma.QuestionsCreateManyInput | Prisma.QuestionsCreateManyInput[]
}

/**
 * Questions createManyAndReturn
 */
export type QuestionsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Questions
   */
  select?: Prisma.QuestionsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Questions
   */
  omit?: Prisma.QuestionsOmit<ExtArgs> | null
  /**
   * The data used to create many Questions.
   */
  data: Prisma.QuestionsCreateManyInput | Prisma.QuestionsCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuestionsIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Questions update
 */
export type QuestionsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Questions
   */
  select?: Prisma.QuestionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Questions
   */
  omit?: Prisma.QuestionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuestionsInclude<ExtArgs> | null
  /**
   * The data needed to update a Questions.
   */
  data: Prisma.XOR<Prisma.QuestionsUpdateInput, Prisma.QuestionsUncheckedUpdateInput>
  /**
   * Choose, which Questions to update.
   */
  where: Prisma.QuestionsWhereUniqueInput
}

/**
 * Questions updateMany
 */
export type QuestionsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Questions.
   */
  data: Prisma.XOR<Prisma.QuestionsUpdateManyMutationInput, Prisma.QuestionsUncheckedUpdateManyInput>
  /**
   * Filter which Questions to update
   */
  where?: Prisma.QuestionsWhereInput
  /**
   * Limit how many Questions to update.
   */
  limit?: number
}

/**
 * Questions updateManyAndReturn
 */
export type QuestionsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Questions
   */
  select?: Prisma.QuestionsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Questions
   */
  omit?: Prisma.QuestionsOmit<ExtArgs> | null
  /**
   * The data used to update Questions.
   */
  data: Prisma.XOR<Prisma.QuestionsUpdateManyMutationInput, Prisma.QuestionsUncheckedUpdateManyInput>
  /**
   * Filter which Questions to update
   */
  where?: Prisma.QuestionsWhereInput
  /**
   * Limit how many Questions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuestionsIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Questions upsert
 */
export type QuestionsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Questions
   */
  select?: Prisma.QuestionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Questions
   */
  omit?: Prisma.QuestionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuestionsInclude<ExtArgs> | null
  /**
   * The filter to search for the Questions to update in case it exists.
   */
  where: Prisma.QuestionsWhereUniqueInput
  /**
   * In case the Questions found by the `where` argument doesn't exist, create a new Questions with this data.
   */
  create: Prisma.XOR<Prisma.QuestionsCreateInput, Prisma.QuestionsUncheckedCreateInput>
  /**
   * In case the Questions was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.QuestionsUpdateInput, Prisma.QuestionsUncheckedUpdateInput>
}

/**
 * Questions delete
 */
export type QuestionsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Questions
   */
  select?: Prisma.QuestionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Questions
   */
  omit?: Prisma.QuestionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuestionsInclude<ExtArgs> | null
  /**
   * Filter which Questions to delete.
   */
  where: Prisma.QuestionsWhereUniqueInput
}

/**
 * Questions deleteMany
 */
export type QuestionsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Questions to delete
   */
  where?: Prisma.QuestionsWhereInput
  /**
   * Limit how many Questions to delete.
   */
  limit?: number
}

/**
 * Questions.answers
 */
export type Questions$answersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Answers
   */
  select?: Prisma.AnswersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Answers
   */
  omit?: Prisma.AnswersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnswersInclude<ExtArgs> | null
  where?: Prisma.AnswersWhereInput
  orderBy?: Prisma.AnswersOrderByWithRelationInput | Prisma.AnswersOrderByWithRelationInput[]
  cursor?: Prisma.AnswersWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.AnswersScalarFieldEnum | Prisma.AnswersScalarFieldEnum[]
}

/**
 * Questions without action
 */
export type QuestionsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Questions
   */
  select?: Prisma.QuestionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Questions
   */
  omit?: Prisma.QuestionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuestionsInclude<ExtArgs> | null
}

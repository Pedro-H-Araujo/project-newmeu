
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Answers` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Answers
 * 
 */
export type AnswersModel = runtime.Types.Result.DefaultSelection<Prisma.$AnswersPayload>

export type AggregateAnswers = {
  _count: AnswersCountAggregateOutputType | null
  _avg: AnswersAvgAggregateOutputType | null
  _sum: AnswersSumAggregateOutputType | null
  _min: AnswersMinAggregateOutputType | null
  _max: AnswersMaxAggregateOutputType | null
}

export type AnswersAvgAggregateOutputType = {
  id: number | null
  questionid: number | null
  userid: number | null
}

export type AnswersSumAggregateOutputType = {
  id: number | null
  questionid: number | null
  userid: number | null
}

export type AnswersMinAggregateOutputType = {
  id: number | null
  body: string | null
  createdAt: Date | null
  updatedAt: Date | null
  questionid: number | null
  userid: number | null
}

export type AnswersMaxAggregateOutputType = {
  id: number | null
  body: string | null
  createdAt: Date | null
  updatedAt: Date | null
  questionid: number | null
  userid: number | null
}

export type AnswersCountAggregateOutputType = {
  id: number
  body: number
  createdAt: number
  updatedAt: number
  questionid: number
  userid: number
  _all: number
}


export type AnswersAvgAggregateInputType = {
  id?: true
  questionid?: true
  userid?: true
}

export type AnswersSumAggregateInputType = {
  id?: true
  questionid?: true
  userid?: true
}

export type AnswersMinAggregateInputType = {
  id?: true
  body?: true
  createdAt?: true
  updatedAt?: true
  questionid?: true
  userid?: true
}

export type AnswersMaxAggregateInputType = {
  id?: true
  body?: true
  createdAt?: true
  updatedAt?: true
  questionid?: true
  userid?: true
}

export type AnswersCountAggregateInputType = {
  id?: true
  body?: true
  createdAt?: true
  updatedAt?: true
  questionid?: true
  userid?: true
  _all?: true
}

export type AnswersAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Answers to aggregate.
   */
  where?: Prisma.AnswersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Answers to fetch.
   */
  orderBy?: Prisma.AnswersOrderByWithRelationInput | Prisma.AnswersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AnswersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Answers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Answers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Answers
  **/
  _count?: true | AnswersCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: AnswersAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: AnswersSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AnswersMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AnswersMaxAggregateInputType
}

export type GetAnswersAggregateType<T extends AnswersAggregateArgs> = {
      [P in keyof T & keyof AggregateAnswers]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAnswers[P]>
    : Prisma.GetScalarType<T[P], AggregateAnswers[P]>
}




export type AnswersGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AnswersWhereInput
  orderBy?: Prisma.AnswersOrderByWithAggregationInput | Prisma.AnswersOrderByWithAggregationInput[]
  by: Prisma.AnswersScalarFieldEnum[] | Prisma.AnswersScalarFieldEnum
  having?: Prisma.AnswersScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AnswersCountAggregateInputType | true
  _avg?: AnswersAvgAggregateInputType
  _sum?: AnswersSumAggregateInputType
  _min?: AnswersMinAggregateInputType
  _max?: AnswersMaxAggregateInputType
}

export type AnswersGroupByOutputType = {
  id: number
  body: string
  createdAt: Date
  updatedAt: Date
  questionid: number
  userid: number
  _count: AnswersCountAggregateOutputType | null
  _avg: AnswersAvgAggregateOutputType | null
  _sum: AnswersSumAggregateOutputType | null
  _min: AnswersMinAggregateOutputType | null
  _max: AnswersMaxAggregateOutputType | null
}

type GetAnswersGroupByPayload<T extends AnswersGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AnswersGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AnswersGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AnswersGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AnswersGroupByOutputType[P]>
      }
    >
  >



export type AnswersWhereInput = {
  AND?: Prisma.AnswersWhereInput | Prisma.AnswersWhereInput[]
  OR?: Prisma.AnswersWhereInput[]
  NOT?: Prisma.AnswersWhereInput | Prisma.AnswersWhereInput[]
  id?: Prisma.IntFilter<"Answers"> | number
  body?: Prisma.StringFilter<"Answers"> | string
  createdAt?: Prisma.DateTimeFilter<"Answers"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Answers"> | Date | string
  questionid?: Prisma.IntFilter<"Answers"> | number
  userid?: Prisma.IntFilter<"Answers"> | number
  question?: Prisma.XOR<Prisma.QuestionsScalarRelationFilter, Prisma.QuestionsWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type AnswersOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  body?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  questionid?: Prisma.SortOrder
  userid?: Prisma.SortOrder
  question?: Prisma.QuestionsOrderByWithRelationInput
  user?: Prisma.UserOrderByWithRelationInput
}

export type AnswersWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.AnswersWhereInput | Prisma.AnswersWhereInput[]
  OR?: Prisma.AnswersWhereInput[]
  NOT?: Prisma.AnswersWhereInput | Prisma.AnswersWhereInput[]
  body?: Prisma.StringFilter<"Answers"> | string
  createdAt?: Prisma.DateTimeFilter<"Answers"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Answers"> | Date | string
  questionid?: Prisma.IntFilter<"Answers"> | number
  userid?: Prisma.IntFilter<"Answers"> | number
  question?: Prisma.XOR<Prisma.QuestionsScalarRelationFilter, Prisma.QuestionsWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type AnswersOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  body?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  questionid?: Prisma.SortOrder
  userid?: Prisma.SortOrder
  _count?: Prisma.AnswersCountOrderByAggregateInput
  _avg?: Prisma.AnswersAvgOrderByAggregateInput
  _max?: Prisma.AnswersMaxOrderByAggregateInput
  _min?: Prisma.AnswersMinOrderByAggregateInput
  _sum?: Prisma.AnswersSumOrderByAggregateInput
}

export type AnswersScalarWhereWithAggregatesInput = {
  AND?: Prisma.AnswersScalarWhereWithAggregatesInput | Prisma.AnswersScalarWhereWithAggregatesInput[]
  OR?: Prisma.AnswersScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AnswersScalarWhereWithAggregatesInput | Prisma.AnswersScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Answers"> | number
  body?: Prisma.StringWithAggregatesFilter<"Answers"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Answers"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Answers"> | Date | string
  questionid?: Prisma.IntWithAggregatesFilter<"Answers"> | number
  userid?: Prisma.IntWithAggregatesFilter<"Answers"> | number
}

export type AnswersCreateInput = {
  body: string
  createdAt?: Date | string
  updatedAt?: Date | string
  question: Prisma.QuestionsCreateNestedOneWithoutAnswersInput
  user: Prisma.UserCreateNestedOneWithoutAnswersInput
}

export type AnswersUncheckedCreateInput = {
  id?: number
  body: string
  createdAt?: Date | string
  updatedAt?: Date | string
  questionid: number
  userid: number
}

export type AnswersUpdateInput = {
  body?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  question?: Prisma.QuestionsUpdateOneRequiredWithoutAnswersNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutAnswersNestedInput
}

export type AnswersUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  body?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  questionid?: Prisma.IntFieldUpdateOperationsInput | number
  userid?: Prisma.IntFieldUpdateOperationsInput | number
}

export type AnswersCreateManyInput = {
  id?: number
  body: string
  createdAt?: Date | string
  updatedAt?: Date | string
  questionid: number
  userid: number
}

export type AnswersUpdateManyMutationInput = {
  body?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AnswersUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  body?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  questionid?: Prisma.IntFieldUpdateOperationsInput | number
  userid?: Prisma.IntFieldUpdateOperationsInput | number
}

export type AnswersListRelationFilter = {
  every?: Prisma.AnswersWhereInput
  some?: Prisma.AnswersWhereInput
  none?: Prisma.AnswersWhereInput
}

export type AnswersOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type AnswersCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  body?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  questionid?: Prisma.SortOrder
  userid?: Prisma.SortOrder
}

export type AnswersAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  questionid?: Prisma.SortOrder
  userid?: Prisma.SortOrder
}

export type AnswersMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  body?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  questionid?: Prisma.SortOrder
  userid?: Prisma.SortOrder
}

export type AnswersMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  body?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  questionid?: Prisma.SortOrder
  userid?: Prisma.SortOrder
}

export type AnswersSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  questionid?: Prisma.SortOrder
  userid?: Prisma.SortOrder
}

export type AnswersCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.AnswersCreateWithoutUserInput, Prisma.AnswersUncheckedCreateWithoutUserInput> | Prisma.AnswersCreateWithoutUserInput[] | Prisma.AnswersUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AnswersCreateOrConnectWithoutUserInput | Prisma.AnswersCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.AnswersCreateManyUserInputEnvelope
  connect?: Prisma.AnswersWhereUniqueInput | Prisma.AnswersWhereUniqueInput[]
}

export type AnswersUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.AnswersCreateWithoutUserInput, Prisma.AnswersUncheckedCreateWithoutUserInput> | Prisma.AnswersCreateWithoutUserInput[] | Prisma.AnswersUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AnswersCreateOrConnectWithoutUserInput | Prisma.AnswersCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.AnswersCreateManyUserInputEnvelope
  connect?: Prisma.AnswersWhereUniqueInput | Prisma.AnswersWhereUniqueInput[]
}

export type AnswersUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.AnswersCreateWithoutUserInput, Prisma.AnswersUncheckedCreateWithoutUserInput> | Prisma.AnswersCreateWithoutUserInput[] | Prisma.AnswersUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AnswersCreateOrConnectWithoutUserInput | Prisma.AnswersCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.AnswersUpsertWithWhereUniqueWithoutUserInput | Prisma.AnswersUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.AnswersCreateManyUserInputEnvelope
  set?: Prisma.AnswersWhereUniqueInput | Prisma.AnswersWhereUniqueInput[]
  disconnect?: Prisma.AnswersWhereUniqueInput | Prisma.AnswersWhereUniqueInput[]
  delete?: Prisma.AnswersWhereUniqueInput | Prisma.AnswersWhereUniqueInput[]
  connect?: Prisma.AnswersWhereUniqueInput | Prisma.AnswersWhereUniqueInput[]
  update?: Prisma.AnswersUpdateWithWhereUniqueWithoutUserInput | Prisma.AnswersUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.AnswersUpdateManyWithWhereWithoutUserInput | Prisma.AnswersUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.AnswersScalarWhereInput | Prisma.AnswersScalarWhereInput[]
}

export type AnswersUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.AnswersCreateWithoutUserInput, Prisma.AnswersUncheckedCreateWithoutUserInput> | Prisma.AnswersCreateWithoutUserInput[] | Prisma.AnswersUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AnswersCreateOrConnectWithoutUserInput | Prisma.AnswersCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.AnswersUpsertWithWhereUniqueWithoutUserInput | Prisma.AnswersUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.AnswersCreateManyUserInputEnvelope
  set?: Prisma.AnswersWhereUniqueInput | Prisma.AnswersWhereUniqueInput[]
  disconnect?: Prisma.AnswersWhereUniqueInput | Prisma.AnswersWhereUniqueInput[]
  delete?: Prisma.AnswersWhereUniqueInput | Prisma.AnswersWhereUniqueInput[]
  connect?: Prisma.AnswersWhereUniqueInput | Prisma.AnswersWhereUniqueInput[]
  update?: Prisma.AnswersUpdateWithWhereUniqueWithoutUserInput | Prisma.AnswersUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.AnswersUpdateManyWithWhereWithoutUserInput | Prisma.AnswersUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.AnswersScalarWhereInput | Prisma.AnswersScalarWhereInput[]
}

export type AnswersCreateNestedManyWithoutQuestionInput = {
  create?: Prisma.XOR<Prisma.AnswersCreateWithoutQuestionInput, Prisma.AnswersUncheckedCreateWithoutQuestionInput> | Prisma.AnswersCreateWithoutQuestionInput[] | Prisma.AnswersUncheckedCreateWithoutQuestionInput[]
  connectOrCreate?: Prisma.AnswersCreateOrConnectWithoutQuestionInput | Prisma.AnswersCreateOrConnectWithoutQuestionInput[]
  createMany?: Prisma.AnswersCreateManyQuestionInputEnvelope
  connect?: Prisma.AnswersWhereUniqueInput | Prisma.AnswersWhereUniqueInput[]
}

export type AnswersUncheckedCreateNestedManyWithoutQuestionInput = {
  create?: Prisma.XOR<Prisma.AnswersCreateWithoutQuestionInput, Prisma.AnswersUncheckedCreateWithoutQuestionInput> | Prisma.AnswersCreateWithoutQuestionInput[] | Prisma.AnswersUncheckedCreateWithoutQuestionInput[]
  connectOrCreate?: Prisma.AnswersCreateOrConnectWithoutQuestionInput | Prisma.AnswersCreateOrConnectWithoutQuestionInput[]
  createMany?: Prisma.AnswersCreateManyQuestionInputEnvelope
  connect?: Prisma.AnswersWhereUniqueInput | Prisma.AnswersWhereUniqueInput[]
}

export type AnswersUpdateManyWithoutQuestionNestedInput = {
  create?: Prisma.XOR<Prisma.AnswersCreateWithoutQuestionInput, Prisma.AnswersUncheckedCreateWithoutQuestionInput> | Prisma.AnswersCreateWithoutQuestionInput[] | Prisma.AnswersUncheckedCreateWithoutQuestionInput[]
  connectOrCreate?: Prisma.AnswersCreateOrConnectWithoutQuestionInput | Prisma.AnswersCreateOrConnectWithoutQuestionInput[]
  upsert?: Prisma.AnswersUpsertWithWhereUniqueWithoutQuestionInput | Prisma.AnswersUpsertWithWhereUniqueWithoutQuestionInput[]
  createMany?: Prisma.AnswersCreateManyQuestionInputEnvelope
  set?: Prisma.AnswersWhereUniqueInput | Prisma.AnswersWhereUniqueInput[]
  disconnect?: Prisma.AnswersWhereUniqueInput | Prisma.AnswersWhereUniqueInput[]
  delete?: Prisma.AnswersWhereUniqueInput | Prisma.AnswersWhereUniqueInput[]
  connect?: Prisma.AnswersWhereUniqueInput | Prisma.AnswersWhereUniqueInput[]
  update?: Prisma.AnswersUpdateWithWhereUniqueWithoutQuestionInput | Prisma.AnswersUpdateWithWhereUniqueWithoutQuestionInput[]
  updateMany?: Prisma.AnswersUpdateManyWithWhereWithoutQuestionInput | Prisma.AnswersUpdateManyWithWhereWithoutQuestionInput[]
  deleteMany?: Prisma.AnswersScalarWhereInput | Prisma.AnswersScalarWhereInput[]
}

export type AnswersUncheckedUpdateManyWithoutQuestionNestedInput = {
  create?: Prisma.XOR<Prisma.AnswersCreateWithoutQuestionInput, Prisma.AnswersUncheckedCreateWithoutQuestionInput> | Prisma.AnswersCreateWithoutQuestionInput[] | Prisma.AnswersUncheckedCreateWithoutQuestionInput[]
  connectOrCreate?: Prisma.AnswersCreateOrConnectWithoutQuestionInput | Prisma.AnswersCreateOrConnectWithoutQuestionInput[]
  upsert?: Prisma.AnswersUpsertWithWhereUniqueWithoutQuestionInput | Prisma.AnswersUpsertWithWhereUniqueWithoutQuestionInput[]
  createMany?: Prisma.AnswersCreateManyQuestionInputEnvelope
  set?: Prisma.AnswersWhereUniqueInput | Prisma.AnswersWhereUniqueInput[]
  disconnect?: Prisma.AnswersWhereUniqueInput | Prisma.AnswersWhereUniqueInput[]
  delete?: Prisma.AnswersWhereUniqueInput | Prisma.AnswersWhereUniqueInput[]
  connect?: Prisma.AnswersWhereUniqueInput | Prisma.AnswersWhereUniqueInput[]
  update?: Prisma.AnswersUpdateWithWhereUniqueWithoutQuestionInput | Prisma.AnswersUpdateWithWhereUniqueWithoutQuestionInput[]
  updateMany?: Prisma.AnswersUpdateManyWithWhereWithoutQuestionInput | Prisma.AnswersUpdateManyWithWhereWithoutQuestionInput[]
  deleteMany?: Prisma.AnswersScalarWhereInput | Prisma.AnswersScalarWhereInput[]
}

export type AnswersCreateWithoutUserInput = {
  body: string
  createdAt?: Date | string
  updatedAt?: Date | string
  question: Prisma.QuestionsCreateNestedOneWithoutAnswersInput
}

export type AnswersUncheckedCreateWithoutUserInput = {
  id?: number
  body: string
  createdAt?: Date | string
  updatedAt?: Date | string
  questionid: number
}

export type AnswersCreateOrConnectWithoutUserInput = {
  where: Prisma.AnswersWhereUniqueInput
  create: Prisma.XOR<Prisma.AnswersCreateWithoutUserInput, Prisma.AnswersUncheckedCreateWithoutUserInput>
}

export type AnswersCreateManyUserInputEnvelope = {
  data: Prisma.AnswersCreateManyUserInput | Prisma.AnswersCreateManyUserInput[]
}

export type AnswersUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.AnswersWhereUniqueInput
  update: Prisma.XOR<Prisma.AnswersUpdateWithoutUserInput, Prisma.AnswersUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.AnswersCreateWithoutUserInput, Prisma.AnswersUncheckedCreateWithoutUserInput>
}

export type AnswersUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.AnswersWhereUniqueInput
  data: Prisma.XOR<Prisma.AnswersUpdateWithoutUserInput, Prisma.AnswersUncheckedUpdateWithoutUserInput>
}

export type AnswersUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.AnswersScalarWhereInput
  data: Prisma.XOR<Prisma.AnswersUpdateManyMutationInput, Prisma.AnswersUncheckedUpdateManyWithoutUserInput>
}

export type AnswersScalarWhereInput = {
  AND?: Prisma.AnswersScalarWhereInput | Prisma.AnswersScalarWhereInput[]
  OR?: Prisma.AnswersScalarWhereInput[]
  NOT?: Prisma.AnswersScalarWhereInput | Prisma.AnswersScalarWhereInput[]
  id?: Prisma.IntFilter<"Answers"> | number
  body?: Prisma.StringFilter<"Answers"> | string
  createdAt?: Prisma.DateTimeFilter<"Answers"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Answers"> | Date | string
  questionid?: Prisma.IntFilter<"Answers"> | number
  userid?: Prisma.IntFilter<"Answers"> | number
}

export type AnswersCreateWithoutQuestionInput = {
  body: string
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutAnswersInput
}

export type AnswersUncheckedCreateWithoutQuestionInput = {
  id?: number
  body: string
  createdAt?: Date | string
  updatedAt?: Date | string
  userid: number
}

export type AnswersCreateOrConnectWithoutQuestionInput = {
  where: Prisma.AnswersWhereUniqueInput
  create: Prisma.XOR<Prisma.AnswersCreateWithoutQuestionInput, Prisma.AnswersUncheckedCreateWithoutQuestionInput>
}

export type AnswersCreateManyQuestionInputEnvelope = {
  data: Prisma.AnswersCreateManyQuestionInput | Prisma.AnswersCreateManyQuestionInput[]
}

export type AnswersUpsertWithWhereUniqueWithoutQuestionInput = {
  where: Prisma.AnswersWhereUniqueInput
  update: Prisma.XOR<Prisma.AnswersUpdateWithoutQuestionInput, Prisma.AnswersUncheckedUpdateWithoutQuestionInput>
  create: Prisma.XOR<Prisma.AnswersCreateWithoutQuestionInput, Prisma.AnswersUncheckedCreateWithoutQuestionInput>
}

export type AnswersUpdateWithWhereUniqueWithoutQuestionInput = {
  where: Prisma.AnswersWhereUniqueInput
  data: Prisma.XOR<Prisma.AnswersUpdateWithoutQuestionInput, Prisma.AnswersUncheckedUpdateWithoutQuestionInput>
}

export type AnswersUpdateManyWithWhereWithoutQuestionInput = {
  where: Prisma.AnswersScalarWhereInput
  data: Prisma.XOR<Prisma.AnswersUpdateManyMutationInput, Prisma.AnswersUncheckedUpdateManyWithoutQuestionInput>
}

export type AnswersCreateManyUserInput = {
  id?: number
  body: string
  createdAt?: Date | string
  updatedAt?: Date | string
  questionid: number
}

export type AnswersUpdateWithoutUserInput = {
  body?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  question?: Prisma.QuestionsUpdateOneRequiredWithoutAnswersNestedInput
}

export type AnswersUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  body?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  questionid?: Prisma.IntFieldUpdateOperationsInput | number
}

export type AnswersUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  body?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  questionid?: Prisma.IntFieldUpdateOperationsInput | number
}

export type AnswersCreateManyQuestionInput = {
  id?: number
  body: string
  createdAt?: Date | string
  updatedAt?: Date | string
  userid: number
}

export type AnswersUpdateWithoutQuestionInput = {
  body?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutAnswersNestedInput
}

export type AnswersUncheckedUpdateWithoutQuestionInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  body?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userid?: Prisma.IntFieldUpdateOperationsInput | number
}

export type AnswersUncheckedUpdateManyWithoutQuestionInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  body?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userid?: Prisma.IntFieldUpdateOperationsInput | number
}



export type AnswersSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  body?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  questionid?: boolean
  userid?: boolean
  question?: boolean | Prisma.QuestionsDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["answers"]>

export type AnswersSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  body?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  questionid?: boolean
  userid?: boolean
  question?: boolean | Prisma.QuestionsDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["answers"]>

export type AnswersSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  body?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  questionid?: boolean
  userid?: boolean
  question?: boolean | Prisma.QuestionsDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["answers"]>

export type AnswersSelectScalar = {
  id?: boolean
  body?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  questionid?: boolean
  userid?: boolean
}

export type AnswersOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "body" | "createdAt" | "updatedAt" | "questionid" | "userid", ExtArgs["result"]["answers"]>
export type AnswersInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  question?: boolean | Prisma.QuestionsDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type AnswersIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  question?: boolean | Prisma.QuestionsDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type AnswersIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  question?: boolean | Prisma.QuestionsDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $AnswersPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Answers"
  objects: {
    question: Prisma.$QuestionsPayload<ExtArgs>
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    body: string
    createdAt: Date
    updatedAt: Date
    questionid: number
    userid: number
  }, ExtArgs["result"]["answers"]>
  composites: {}
}

export type AnswersGetPayload<S extends boolean | null | undefined | AnswersDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AnswersPayload, S>

export type AnswersCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AnswersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AnswersCountAggregateInputType | true
  }

export interface AnswersDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Answers'], meta: { name: 'Answers' } }
  /**
   * Find zero or one Answers that matches the filter.
   * @param {AnswersFindUniqueArgs} args - Arguments to find a Answers
   * @example
   * // Get one Answers
   * const answers = await prisma.answers.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AnswersFindUniqueArgs>(args: Prisma.SelectSubset<T, AnswersFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AnswersClient<runtime.Types.Result.GetResult<Prisma.$AnswersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Answers that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AnswersFindUniqueOrThrowArgs} args - Arguments to find a Answers
   * @example
   * // Get one Answers
   * const answers = await prisma.answers.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AnswersFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AnswersFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AnswersClient<runtime.Types.Result.GetResult<Prisma.$AnswersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Answers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnswersFindFirstArgs} args - Arguments to find a Answers
   * @example
   * // Get one Answers
   * const answers = await prisma.answers.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AnswersFindFirstArgs>(args?: Prisma.SelectSubset<T, AnswersFindFirstArgs<ExtArgs>>): Prisma.Prisma__AnswersClient<runtime.Types.Result.GetResult<Prisma.$AnswersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Answers that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnswersFindFirstOrThrowArgs} args - Arguments to find a Answers
   * @example
   * // Get one Answers
   * const answers = await prisma.answers.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AnswersFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AnswersFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AnswersClient<runtime.Types.Result.GetResult<Prisma.$AnswersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Answers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnswersFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Answers
   * const answers = await prisma.answers.findMany()
   * 
   * // Get first 10 Answers
   * const answers = await prisma.answers.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const answersWithIdOnly = await prisma.answers.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AnswersFindManyArgs>(args?: Prisma.SelectSubset<T, AnswersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AnswersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Answers.
   * @param {AnswersCreateArgs} args - Arguments to create a Answers.
   * @example
   * // Create one Answers
   * const Answers = await prisma.answers.create({
   *   data: {
   *     // ... data to create a Answers
   *   }
   * })
   * 
   */
  create<T extends AnswersCreateArgs>(args: Prisma.SelectSubset<T, AnswersCreateArgs<ExtArgs>>): Prisma.Prisma__AnswersClient<runtime.Types.Result.GetResult<Prisma.$AnswersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Answers.
   * @param {AnswersCreateManyArgs} args - Arguments to create many Answers.
   * @example
   * // Create many Answers
   * const answers = await prisma.answers.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AnswersCreateManyArgs>(args?: Prisma.SelectSubset<T, AnswersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Answers and returns the data saved in the database.
   * @param {AnswersCreateManyAndReturnArgs} args - Arguments to create many Answers.
   * @example
   * // Create many Answers
   * const answers = await prisma.answers.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Answers and only return the `id`
   * const answersWithIdOnly = await prisma.answers.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AnswersCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AnswersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AnswersPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Answers.
   * @param {AnswersDeleteArgs} args - Arguments to delete one Answers.
   * @example
   * // Delete one Answers
   * const Answers = await prisma.answers.delete({
   *   where: {
   *     // ... filter to delete one Answers
   *   }
   * })
   * 
   */
  delete<T extends AnswersDeleteArgs>(args: Prisma.SelectSubset<T, AnswersDeleteArgs<ExtArgs>>): Prisma.Prisma__AnswersClient<runtime.Types.Result.GetResult<Prisma.$AnswersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Answers.
   * @param {AnswersUpdateArgs} args - Arguments to update one Answers.
   * @example
   * // Update one Answers
   * const answers = await prisma.answers.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AnswersUpdateArgs>(args: Prisma.SelectSubset<T, AnswersUpdateArgs<ExtArgs>>): Prisma.Prisma__AnswersClient<runtime.Types.Result.GetResult<Prisma.$AnswersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Answers.
   * @param {AnswersDeleteManyArgs} args - Arguments to filter Answers to delete.
   * @example
   * // Delete a few Answers
   * const { count } = await prisma.answers.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AnswersDeleteManyArgs>(args?: Prisma.SelectSubset<T, AnswersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Answers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnswersUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Answers
   * const answers = await prisma.answers.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AnswersUpdateManyArgs>(args: Prisma.SelectSubset<T, AnswersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Answers and returns the data updated in the database.
   * @param {AnswersUpdateManyAndReturnArgs} args - Arguments to update many Answers.
   * @example
   * // Update many Answers
   * const answers = await prisma.answers.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Answers and only return the `id`
   * const answersWithIdOnly = await prisma.answers.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AnswersUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AnswersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AnswersPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Answers.
   * @param {AnswersUpsertArgs} args - Arguments to update or create a Answers.
   * @example
   * // Update or create a Answers
   * const answers = await prisma.answers.upsert({
   *   create: {
   *     // ... data to create a Answers
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Answers we want to update
   *   }
   * })
   */
  upsert<T extends AnswersUpsertArgs>(args: Prisma.SelectSubset<T, AnswersUpsertArgs<ExtArgs>>): Prisma.Prisma__AnswersClient<runtime.Types.Result.GetResult<Prisma.$AnswersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Answers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnswersCountArgs} args - Arguments to filter Answers to count.
   * @example
   * // Count the number of Answers
   * const count = await prisma.answers.count({
   *   where: {
   *     // ... the filter for the Answers we want to count
   *   }
   * })
  **/
  count<T extends AnswersCountArgs>(
    args?: Prisma.Subset<T, AnswersCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AnswersCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Answers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnswersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AnswersAggregateArgs>(args: Prisma.Subset<T, AnswersAggregateArgs>): Prisma.PrismaPromise<GetAnswersAggregateType<T>>

  /**
   * Group by Answers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnswersGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AnswersGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AnswersGroupByArgs['orderBy'] }
      : { orderBy?: AnswersGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AnswersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnswersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Answers model
 */
readonly fields: AnswersFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Answers.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AnswersClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  question<T extends Prisma.QuestionsDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.QuestionsDefaultArgs<ExtArgs>>): Prisma.Prisma__QuestionsClient<runtime.Types.Result.GetResult<Prisma.$QuestionsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Answers model
 */
export interface AnswersFieldRefs {
  readonly id: Prisma.FieldRef<"Answers", 'Int'>
  readonly body: Prisma.FieldRef<"Answers", 'String'>
  readonly createdAt: Prisma.FieldRef<"Answers", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Answers", 'DateTime'>
  readonly questionid: Prisma.FieldRef<"Answers", 'Int'>
  readonly userid: Prisma.FieldRef<"Answers", 'Int'>
}
    

// Custom InputTypes
/**
 * Answers findUnique
 */
export type AnswersFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Answers
   */
  select?: Prisma.AnswersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Answers
   */
  omit?: Prisma.AnswersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnswersInclude<ExtArgs> | null
  /**
   * Filter, which Answers to fetch.
   */
  where: Prisma.AnswersWhereUniqueInput
}

/**
 * Answers findUniqueOrThrow
 */
export type AnswersFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Answers
   */
  select?: Prisma.AnswersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Answers
   */
  omit?: Prisma.AnswersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnswersInclude<ExtArgs> | null
  /**
   * Filter, which Answers to fetch.
   */
  where: Prisma.AnswersWhereUniqueInput
}

/**
 * Answers findFirst
 */
export type AnswersFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Answers
   */
  select?: Prisma.AnswersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Answers
   */
  omit?: Prisma.AnswersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnswersInclude<ExtArgs> | null
  /**
   * Filter, which Answers to fetch.
   */
  where?: Prisma.AnswersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Answers to fetch.
   */
  orderBy?: Prisma.AnswersOrderByWithRelationInput | Prisma.AnswersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Answers.
   */
  cursor?: Prisma.AnswersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Answers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Answers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Answers.
   */
  distinct?: Prisma.AnswersScalarFieldEnum | Prisma.AnswersScalarFieldEnum[]
}

/**
 * Answers findFirstOrThrow
 */
export type AnswersFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Answers
   */
  select?: Prisma.AnswersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Answers
   */
  omit?: Prisma.AnswersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnswersInclude<ExtArgs> | null
  /**
   * Filter, which Answers to fetch.
   */
  where?: Prisma.AnswersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Answers to fetch.
   */
  orderBy?: Prisma.AnswersOrderByWithRelationInput | Prisma.AnswersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Answers.
   */
  cursor?: Prisma.AnswersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Answers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Answers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Answers.
   */
  distinct?: Prisma.AnswersScalarFieldEnum | Prisma.AnswersScalarFieldEnum[]
}

/**
 * Answers findMany
 */
export type AnswersFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Answers
   */
  select?: Prisma.AnswersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Answers
   */
  omit?: Prisma.AnswersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnswersInclude<ExtArgs> | null
  /**
   * Filter, which Answers to fetch.
   */
  where?: Prisma.AnswersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Answers to fetch.
   */
  orderBy?: Prisma.AnswersOrderByWithRelationInput | Prisma.AnswersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Answers.
   */
  cursor?: Prisma.AnswersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Answers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Answers.
   */
  skip?: number
  distinct?: Prisma.AnswersScalarFieldEnum | Prisma.AnswersScalarFieldEnum[]
}

/**
 * Answers create
 */
export type AnswersCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Answers
   */
  select?: Prisma.AnswersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Answers
   */
  omit?: Prisma.AnswersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnswersInclude<ExtArgs> | null
  /**
   * The data needed to create a Answers.
   */
  data: Prisma.XOR<Prisma.AnswersCreateInput, Prisma.AnswersUncheckedCreateInput>
}

/**
 * Answers createMany
 */
export type AnswersCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Answers.
   */
  data: Prisma.AnswersCreateManyInput | Prisma.AnswersCreateManyInput[]
}

/**
 * Answers createManyAndReturn
 */
export type AnswersCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Answers
   */
  select?: Prisma.AnswersSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Answers
   */
  omit?: Prisma.AnswersOmit<ExtArgs> | null
  /**
   * The data used to create many Answers.
   */
  data: Prisma.AnswersCreateManyInput | Prisma.AnswersCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnswersIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Answers update
 */
export type AnswersUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Answers
   */
  select?: Prisma.AnswersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Answers
   */
  omit?: Prisma.AnswersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnswersInclude<ExtArgs> | null
  /**
   * The data needed to update a Answers.
   */
  data: Prisma.XOR<Prisma.AnswersUpdateInput, Prisma.AnswersUncheckedUpdateInput>
  /**
   * Choose, which Answers to update.
   */
  where: Prisma.AnswersWhereUniqueInput
}

/**
 * Answers updateMany
 */
export type AnswersUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Answers.
   */
  data: Prisma.XOR<Prisma.AnswersUpdateManyMutationInput, Prisma.AnswersUncheckedUpdateManyInput>
  /**
   * Filter which Answers to update
   */
  where?: Prisma.AnswersWhereInput
  /**
   * Limit how many Answers to update.
   */
  limit?: number
}

/**
 * Answers updateManyAndReturn
 */
export type AnswersUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Answers
   */
  select?: Prisma.AnswersSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Answers
   */
  omit?: Prisma.AnswersOmit<ExtArgs> | null
  /**
   * The data used to update Answers.
   */
  data: Prisma.XOR<Prisma.AnswersUpdateManyMutationInput, Prisma.AnswersUncheckedUpdateManyInput>
  /**
   * Filter which Answers to update
   */
  where?: Prisma.AnswersWhereInput
  /**
   * Limit how many Answers to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnswersIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Answers upsert
 */
export type AnswersUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Answers
   */
  select?: Prisma.AnswersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Answers
   */
  omit?: Prisma.AnswersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnswersInclude<ExtArgs> | null
  /**
   * The filter to search for the Answers to update in case it exists.
   */
  where: Prisma.AnswersWhereUniqueInput
  /**
   * In case the Answers found by the `where` argument doesn't exist, create a new Answers with this data.
   */
  create: Prisma.XOR<Prisma.AnswersCreateInput, Prisma.AnswersUncheckedCreateInput>
  /**
   * In case the Answers was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AnswersUpdateInput, Prisma.AnswersUncheckedUpdateInput>
}

/**
 * Answers delete
 */
export type AnswersDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Answers
   */
  select?: Prisma.AnswersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Answers
   */
  omit?: Prisma.AnswersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnswersInclude<ExtArgs> | null
  /**
   * Filter which Answers to delete.
   */
  where: Prisma.AnswersWhereUniqueInput
}

/**
 * Answers deleteMany
 */
export type AnswersDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Answers to delete
   */
  where?: Prisma.AnswersWhereInput
  /**
   * Limit how many Answers to delete.
   */
  limit?: number
}

/**
 * Answers without action
 */
export type AnswersDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Answers
   */
  select?: Prisma.AnswersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Answers
   */
  omit?: Prisma.AnswersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AnswersInclude<ExtArgs> | null
}
